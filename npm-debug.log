0 info it worked if it ends with ok
1 verbose cli [ 'node', '/usr/local/bin/npm', 'publish' ]
2 info using npm@1.4.16
3 info using node@v0.10.25
4 verbose publish [ '.' ]
5 verbose cache add [ '.', null ]
6 verbose cache add name=undefined spec="." args=[".",null]
7 verbose parsed url { protocol: null,
7 verbose parsed url   slashes: null,
7 verbose parsed url   auth: null,
7 verbose parsed url   host: null,
7 verbose parsed url   port: null,
7 verbose parsed url   hostname: null,
7 verbose parsed url   hash: null,
7 verbose parsed url   search: null,
7 verbose parsed url   query: null,
7 verbose parsed url   pathname: '.',
7 verbose parsed url   path: '.',
7 verbose parsed url   href: '.' }
8 silly lockFile 3a52ce78- .
9 verbose lock . /Users/muaddub/.npm/3a52ce78-.lock
10 verbose tar pack [ '/Users/muaddub/.npm/arrest-jwt-bucket/1.1.5/package.tgz',
10 verbose tar pack   '.' ]
11 verbose tarball /Users/muaddub/.npm/arrest-jwt-bucket/1.1.5/package.tgz
12 verbose folder .
13 info prepublish arrest-jwt-bucket@1.1.5
14 silly lockFile 1f1177db-tar tar://.
15 verbose lock tar://. /Users/muaddub/.npm/1f1177db-tar.lock
16 silly lockFile 2ab835af-est-jwt-bucket-1-1-5-package-tgz tar:///Users/muaddub/.npm/arrest-jwt-bucket/1.1.5/package.tgz
17 verbose lock tar:///Users/muaddub/.npm/arrest-jwt-bucket/1.1.5/package.tgz /Users/muaddub/.npm/2ab835af-est-jwt-bucket-1-1-5-package-tgz.lock
18 silly lockFile 1f1177db-tar tar://.
19 silly lockFile 1f1177db-tar tar://.
20 silly lockFile 2ab835af-est-jwt-bucket-1-1-5-package-tgz tar:///Users/muaddub/.npm/arrest-jwt-bucket/1.1.5/package.tgz
21 silly lockFile 2ab835af-est-jwt-bucket-1-1-5-package-tgz tar:///Users/muaddub/.npm/arrest-jwt-bucket/1.1.5/package.tgz
22 silly lockFile 8277915b--arrest-jwt-bucket-1-1-5-package /Users/muaddub/.npm/arrest-jwt-bucket/1.1.5/package
23 verbose lock /Users/muaddub/.npm/arrest-jwt-bucket/1.1.5/package /Users/muaddub/.npm/8277915b--arrest-jwt-bucket-1-1-5-package.lock
24 silly lockFile 8277915b--arrest-jwt-bucket-1-1-5-package /Users/muaddub/.npm/arrest-jwt-bucket/1.1.5/package
25 silly lockFile 8277915b--arrest-jwt-bucket-1-1-5-package /Users/muaddub/.npm/arrest-jwt-bucket/1.1.5/package
26 silly lockFile 3a52ce78- .
27 silly lockFile 3a52ce78- .
28 silly publish { name: 'arrest-jwt-bucket',
28 silly publish   version: '1.1.5',
28 silly publish   description: 'REST framework for Node.js, Express and MongoDB',
28 silly publish   homepage: 'https://github.com/AlexisReverte/arrest-jwt-bucket',
28 silly publish   keywords:
28 silly publish    [ 'node',
28 silly publish      'node.js',
28 silly publish      'rest',
28 silly publish      'mongodb',
28 silly publish      'express',
28 silly publish      'connect',
28 silly publish      'angularjs' ],
28 silly publish   author: { name: 'Matsiya', email: 'info@matsiya.com' },
28 silly publish   contributors: [],
28 silly publish   licenses:
28 silly publish    [ { type: 'MIT',
28 silly publish        url: 'http://github.com/vivocha/arrest/raw/master/LICENSE' } ],
28 silly publish   repository:
28 silly publish    { type: 'git',
28 silly publish      url: 'https://github.com/AlexisReverte/arrest-jwt-bucket.git' },
28 silly publish   dependencies: { mongodb: '>= 1.3.0', jsonwebtoken: '>=0.2.0' },
28 silly publish   main: 'index',
28 silly publish   engines: { node: '>= 0.6.0' },
28 silly publish   readme: 'arrest-jwt-bucket\n=================\n\nForked from vivocha arrest repo : https://github.com/vivocha/arrest\n\n\nREST framework for Node.js, Express and MongoDB\n\nArrest lets you write RESTful web services in minutes. It works with Express,\nimplements simple CRUD semantics on MongoDB and the resulting web services\nare compatible with the $resource service of AngularJS.\n\nIt differs from the original repo by using jwt for accessing routes, and a variable in the token named bucket for db name.\n\n## How to Install\n\n```bash\nnpm install arrest-jwt-bucket\n```\n\n## Super Simple Sample\n\nThe following sample application shows how to attach a simple REST API to and express\napplication. In the sample, the path */api* is linked to a *data* collection\non a MongoDB instance running on *localhost* with the db name stored in the *jsontoken* token:\n\n```js\nvar arrest = require(\'arrest\')\n  , express = require(\'express\')\n  , app = express();\n\nvar privateKey = "aaaaaaaahhhhhhhhhh";\n\napp.use(express.bodyParser());\n\narrest.use(app, \'/api\', new arrest.RestMongoAPI(\'mongodb://localhost:27017\', privateKey, \'data\'));\n\napp.listen(3000);\n```\n\nNow you can query your *data* collection like this:\n\n```bash\ncurl --header "Authorization: Bearer jwttoken" "http://localhost:3000/api"\n```\n\nYou can add a new item:\n\n```bash\ncurl --header "Authorization: Bearer jwttoken" "http://localhost:3000/api" -d "name=Jimbo&surname=Johnson"\n```\n\n(for complex objects, just do a POST with a JSON body)\n\nYou can query a specific item by appeding the identifier of the record (the _id attribute):\n\n```bash\ncurl --header "Authorization: Bearer jwttoken" "http://localhost:3000/api/51acc04f196573941f000002"\n```\n\nYou can update an item:\n\n```bash\ncurl --header "Authorization: Bearer jwttoken" "http://localhost:3000/api/51acc04f196573941f000002" "name=Jimbo&surname=Smith"\n```\n\nAnd finally you can delete an item:\n\n```bash\ncurl --header "Authorization: Bearer jwttoken" "http://localhost:3000/api/51acc04f196573941f000002" -X DELETE\n```\n\nTo use this REST service in an [AngularJS](http://angularjs.org) application, all you need to do is to include the\n[ngResource](http://docs.angularjs.org/api/ngResource.$resource) service and, in a controller, create a $resource object:\n\n```js\nvar api = new $resource(\'/api/:_id\', { _id: \'@_id\' }, {});\n\n$scope.data = api.query();\n```\n\n## Default API routes\n\nBy default, each time you call `arrest.use` specifying a different `path`, the following routes are\nadded to your Express `app`:\n\n```js\napp.get(\'/path\', arrest.RestAPI._query);\napp.get(\'/path/:id\', arrest.RestAPI._get);\napp.put(\'/path\', arrest.RestAPI._create);\napp.post(\'/path\', arrest.RestAPI._create);\napp.post(\'/path/:id\', arrest.RestAPI._update);\napp.delete(\'/path/:id\', arrest.RestAPI._remove);\n```\n\n## Creating a custom API\n\nTo create a custom API, start by defining a sub class of RestMongoAPI (or RestAPI if you don\'t need\nMongoDB support):\n\n```js\nvar util = require(\'util\')\n  , arrest = require(\'arrest\')\n  \nfunction MyAPI() {\n  arrest.RestMongoAPI.call(this, \'mongodb://localhost:27017\', privateKey, \'my_collection\');\n}\n\nutil.inherits(MyAPI, RestMongoAPI);\n```\n\nYou can now customize, for example, how the queries on the entire collection are performed: the\nfollowing example checks that a query parameter `q` is passed to the web service:\n\n```js\nMyAPI.prototype._query = function(req, res) {\n  var self = this;\n\n  self.resolveAuthentification(req, self.privateKey, function () {\n      if (!req.user && !req.user.bucket) {\n          return arrest.sendError( res, 401, \'Unauthorized\');\n      }\n\n      if (!req.query.q) {\n          arrest.sendError(res, 400, \'q parameter is missing\');\n      } else {\n        self.query.call( self, req.user.bucket, { name: req.query.q}, arrest.responseCallback(res));\n      }\n  });\n}\n```\n\nTo add a new web services, modify the `routes` array, adding the required entries.\nThe array contains objects with to following format:\n\n```js\n{\n  method: \'get|post|put|patch|delete|any other valid http method\',\n  mount: \'/path/to/the/new/webservice/:with/:needed/:paramenters\',\n  handler: this.handler_function }\n}\n```\n\nThe default routes are:\n\n```js\n[\n  { method: \'get\',    mount: \'\',     handler: this._query },\n  { method: \'get\',    mount: \'/:id\', handler: this._get },\n  { method: \'put\',    mount: \'\',     handler: this._create },\n  { method: \'post\',   mount: \'\',     handler: this._create },\n  { method: \'post\',   mount: \'/:id\', handler: this._update },\n  { method: \'delete\', mount: \'/:id\', handler: this._remove }\n]\n```\n\nFor example:\n\n```js\nfunction MyAPI() {\n  arrest.RestMongoAPI.call(this, \'mongodb://localhost:27017\', privateKey, \'my_collection\');\n  this.routes.push({ method: \'get\', mount: \'/greet/:name\', handler: this._hello });\n}\n\nutil.inherits(MyAPI, RestMongoAPI);\n\nMyAPI.prototype._hello = function(req, res) {\n  res.jsonp({ hello: req.param.name });\n}\n```\n',
28 silly publish   readmeFilename: 'README.md',
28 silly publish   gitHead: '8839fd18ca1bcfb4b76bc4edc871f93de2e47b47',
28 silly publish   bugs: { url: 'https://github.com/AlexisReverte/arrest-jwt-bucket/issues' },
28 silly publish   _id: 'arrest-jwt-bucket@1.1.5',
28 silly publish   scripts: {},
28 silly publish   _shasum: 'b60459f718a272fba65b90a73c244810b63a9a2e',
28 silly publish   _from: '.' }
29 verbose request where is /arrest-jwt-bucket
30 verbose request registry https://registry.npmjs.org/
31 verbose request id 3602cb403bf2cc9e
32 verbose url raw /arrest-jwt-bucket
33 verbose url resolving [ 'https://registry.npmjs.org/', './arrest-jwt-bucket' ]
34 verbose url resolved https://registry.npmjs.org/arrest-jwt-bucket
35 verbose request where is https://registry.npmjs.org/arrest-jwt-bucket
36 info trying registry request attempt 1 at 09:35:26
37 http PUT https://registry.npmjs.org/arrest-jwt-bucket
38 http 403 https://registry.npmjs.org/arrest-jwt-bucket
39 verbose headers { date: 'Wed, 25 Jun 2014 07:35:29 GMT',
39 verbose headers   server: 'CouchDB/1.5.0 (Erlang OTP/R14B04)',
39 verbose headers   'content-type': 'application/json',
39 verbose headers   'cache-control': 'max-age=30',
39 verbose headers   'content-length': '8659',
39 verbose headers   'accept-ranges': 'bytes',
39 verbose headers   via: '1.1 varnish',
39 verbose headers   'x-served-by': 'cache-fra1235-FRA',
39 verbose headers   'x-cache': 'MISS',
39 verbose headers   'x-cache-hits': '0',
39 verbose headers   'x-timer': 'S1403681728.572006,VS0,VE654',
39 verbose headers   'keep-alive': 'timeout=10, max=50',
39 verbose headers   connection: 'Keep-Alive' }
40 error publish Failed PUT 403
41 error Error: forbidden cannot modify pre-existing version: 1.1.5
41 error old={"name":"arrest-jwt-bucket","version":"1.1.5","description":"REST framework for Node.js, Express and MongoDB","homepage":"https://github.com/AlexisReverte/arrest-jwt-bucket","keywords":["node","node.js","rest","mongodb","express","connect","angularjs"],"author":{"name":"Matsiya","email":"info@matsiya.com"},"contributors":[],"licenses":[{"type":"MIT","url":"http://github.com/vivocha/arrest/raw/master/LICENSE"}],"repository":{"type":"git","url":"https://github.com/AlexisReverte/arrest-jwt-bucket.git"},"dependencies":{"mongodb":">= 1.3.0","jsonwebtoken":">=0.2.0"},"main":"index","engines":{"node":">= 0.6.0"},"gitHead":"8839fd18ca1bcfb4b76bc4edc871f93de2e47b47","bugs":{"url":"https://github.com/AlexisReverte/arrest-jwt-bucket/issues"},"_id":"arrest-jwt-bucket@1.1.5","scripts":{},"_shasum":"b60459f718a272fba65b90a73c244810b63a9a2e","_from":".","_npmVersion":"1.4.13","_npmUser":{"name":"matsiya","email":"info@matsiya.com"},"maintainers":[{"name":"matsiya","email":"info@matsiya.com"}],"dist":{"shasum":"b60459f718a272fba65b90a73c244810b63a9a2e","tarball":"http://registry.npmjs.org/arrest-jwt-bucket/-/arrest-jwt-bucket-1.1.5.tgz"}}
41 error new={"name":"arrest-jwt-bucket","version":"1.1.5","description":"REST framework for Node.js, Express and MongoDB","homepage":"https://github.com/AlexisReverte/arrest-jwt-bucket","keywords":["node","node.js","rest","mongodb","express","connect","angularjs"],"author":{"name":"Matsiya","email":"info@matsiya.com"},"contributors":[],"licenses":[{"type":"MIT","url":"http://github.com/vivocha/arrest/raw/master/LICENSE"}],"repository":{"type":"git","url":"https://github.com/AlexisReverte/arrest-jwt-bucket.git"},"dependencies":{"mongodb":">= 1.3.0","jsonwebtoken":">=0.2.0"},"main":"index","engines":{"node":">= 0.6.0"},"readme":"arrest-jwt-bucket\u000a=================\u000a\u000aForked from vivocha arrest repo : https://github.com/vivocha/arrest\u000a\u000a\u000aREST framework for Node.js, Express and MongoDB\u000a\u000aArrest lets you write RESTful web services in minutes. It works with Express,\u000aimplements simple CRUD semantics on MongoDB and the resulting web services\u000aare compatible with the $resource service of AngularJS.\u000a\u000aIt differs from the original repo by using jwt for accessing routes, and a variable in the token named bucket for db name.\u000a\u000a## How to Install\u000a\u000a```bash\u000anpm install arrest-jwt-bucket\u000a```\u000a\u000a## Super Simple Sample\u000a\u000aThe following sample application shows how to attach a simple REST API to and express\u000aapplication. In the sample, the path */api* is linked to a *data* collection\u000aon a MongoDB instance running on *localhost* with the db name stored in the *jsontoken* token:\u000a\u000a```js\u000avar arrest = require('arrest')\u000a  , express = require('express')\u000a  , app = express();\u000a\u000avar privateKey = \"aaaaaaaahhhhhhhhhh\";\u000a\u000aapp.use(express.bodyParser());\u000a\u000aarrest.use(app, '/api', new arrest.RestMongoAPI('mongodb://localhost:27017', privateKey, 'data'));\u000a\u000aapp.listen(3000);\u000a```\u000a\u000aNow you can query your *data* collection like this:\u000a\u000a```bash\u000acurl --header \"Authorization: Bearer jwttoken\" \"http://localhost:3000/api\"\u000a```\u000a\u000aYou can add a new item:\u000a\u000a```bash\u000acurl --header \"Authorization: Bearer jwttoken\" \"http://localhost:3000/api\" -d \"name=Jimbo&surname=Johnson\"\u000a```\u000a\u000a(for complex objects, just do a POST with a JSON body)\u000a\u000aYou can query a specific item by appeding the identifier of the record (the _id attribute):\u000a\u000a```bash\u000acurl --header \"Authorization: Bearer jwttoken\" \"http://localhost:3000/api/51acc04f196573941f000002\"\u000a```\u000a\u000aYou can update an item:\u000a\u000a```bash\u000acurl --header \"Authorization: Bearer jwttoken\" \"http://localhost:3000/api/51acc04f196573941f000002\" \"name=Jimbo&surname=Smith\"\u000a```\u000a\u000aAnd finally you can delete an item:\u000a\u000a```bash\u000acurl --header \"Authorization: Bearer jwttoken\" \"http://localhost:3000/api/51acc04f196573941f000002\" -X DELETE\u000a```\u000a\u000aTo use this REST service in an [AngularJS](http://angularjs.org) application, all you need to do is to include the\u000a[ngResource](http://docs.angularjs.org/api/ngResource.$resource) service and, in a controller, create a $resource object:\u000a\u000a```js\u000avar api = new $resource('/api/:_id', { _id: '@_id' }, {});\u000a\u000a$scope.data = api.query();\u000a```\u000a\u000a## Default API routes\u000a\u000aBy default, each time you call `arrest.use` specifying a different `path`, the following routes are\u000aadded to your Express `app`:\u000a\u000a```js\u000aapp.get('/path', arrest.RestAPI._query);\u000aapp.get('/path/:id', arrest.RestAPI._get);\u000aapp.put('/path', arrest.RestAPI._create);\u000aapp.post('/path', arrest.RestAPI._create);\u000aapp.post('/path/:id', arrest.RestAPI._update);\u000aapp.delete('/path/:id', arrest.RestAPI._remove);\u000a```\u000a\u000a## Creating a custom API\u000a\u000aTo create a custom API, start by defining a sub class of RestMongoAPI (or RestAPI if you don't need\u000aMongoDB support):\u000a\u000a```js\u000avar util = require('util')\u000a  , arrest = require('arrest')\u000a  \u000afunction MyAPI() {\u000a  arrest.RestMongoAPI.call(this, 'mongodb://localhost:27017', privateKey, 'my_collection');\u000a}\u000a\u000autil.inherits(MyAPI, RestMongoAPI);\u000a```\u000a\u000aYou can now customize, for example, how the queries on the entire collection are performed: the\u000afollowing example checks that a query parameter `q` is passed to the web service:\u000a\u000a```js\u000aMyAPI.prototype._query = function(req, res) {\u000a  var self = this;\u000a\u000a  self.resolveAuthentification(req, self.privateKey, function () {\u000a      if (!req.user && !req.user.bucket) {\u000a          return arrest.sendError( res, 401, 'Unauthorized');\u000a      }\u000a\u000a      if (!req.query.q) {\u000a          arrest.sendError(res, 400, 'q parameter is missing');\u000a      } else {\u000a        self.query.call( self, req.user.bucket, { name: req.query.q}, arrest.responseCallback(res));\u000a      }\u000a  });\u000a}\u000a```\u000a\u000aTo add a new web services, modify the `routes` array, adding the required entries.\u000aThe array contains objects with to following format:\u000a\u000a```js\u000a{\u000a  method: 'get|post|put|patch|delete|any other valid http method',\u000a  mount: '/path/to/the/new/webservice/:with/:needed/:paramenters',\u000a  handler: this.handler_function }\u000a}\u000a```\u000a\u000aThe default routes are:\u000a\u000a```js\u000a[\u000a  { method: 'get',    mount: '',     handler: this._query },\u000a  { method: 'get',    mount: '/:id', handler: this._get },\u000a  { method: 'put',    mount: '',     handler: this._create },\u000a  { method: 'post',   mount: '',     handler: this._create },\u000a  { method: 'post',   mount: '/:id', handler: this._update },\u000a  { method: 'delete', mount: '/:id', handler: this._remove }\u000a]\u000a```\u000a\u000aFor example:\u000a\u000a```js\u000afunction MyAPI() {\u000a  arrest.RestMongoAPI.call(this, 'mongodb://localhost:27017', privateKey, 'my_collection');\u000a  this.routes.push({ method: 'get', mount: '/greet/:name', handler: this._hello });\u000a}\u000a\u000autil.inherits(MyAPI, RestMongoAPI);\u000a\u000aMyAPI.prototype._hello = function(req, res) {\u000a  res.jsonp({ hello: req.param.name });\u000a}\u000a```\u000a","readmeFilename":"README.md","gitHead":"8839fd18ca1bcfb4b76bc4edc871f93de2e47b47","bugs":{"url":"https://github.com/AlexisReverte/arrest-jwt-bucket/issues"},"_id":"arrest-jwt-bucket@1.1.5","scripts":{},"_shasum":"b60459f718a272fba65b90a73c244810b63a9a2e","_from":".","_npmVersion":"1.4.16","_npmUser":{"name":"matsiya","email":"info@matsiya.com"},"maintainers":[{"name":"matsiya","email":"info@matsiya.com"}],"dist":{"shasum":"b60459f718a272fba65b90a73c244810b63a9a2e","tarball":"http://registry.npmjs.org/arrest-jwt-bucket/-/arrest-jwt-bucket-1.1.5.tgz"}}: arrest-jwt-bucket
41 error     at RegClient.<anonymous> (/usr/local/lib/node_modules/npm/node_modules/npm-registry-client/lib/request.js:300:14)
41 error     at Request._callback (/usr/local/lib/node_modules/npm/node_modules/npm-registry-client/lib/request.js:238:65)
41 error     at Request.self.callback (/usr/local/lib/node_modules/npm/node_modules/request/request.js:123:22)
41 error     at Request.EventEmitter.emit (events.js:98:17)
41 error     at Request.<anonymous> (/usr/local/lib/node_modules/npm/node_modules/request/request.js:893:14)
41 error     at Request.EventEmitter.emit (events.js:117:20)
41 error     at IncomingMessage.<anonymous> (/usr/local/lib/node_modules/npm/node_modules/request/request.js:844:12)
41 error     at IncomingMessage.EventEmitter.emit (events.js:117:20)
41 error     at _stream_readable.js:920:16
41 error     at process._tickCallback (node.js:415:13)
42 error If you need help, you may report this *entire* log,
42 error including the npm and node versions, at:
42 error     <http://github.com/npm/npm/issues>
43 error System Darwin 13.2.0
44 error command "node" "/usr/local/bin/npm" "publish"
45 error cwd /Users/muaddub/Documents/Matsiya/Development/Applications/GitHub/arrest-jwt
46 error node -v v0.10.25
47 error npm -v 1.4.16
48 verbose exit [ 1, true ]
